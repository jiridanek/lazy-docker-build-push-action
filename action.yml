name: Lazily build and push Docker images
description: Lazily build Docker images to content-identifying-hash based tags

inputs:
  add-hosts:
    description: "List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)"
    required: false
  allow:
    description: "List of extra privileged entitlement (e.g., network.host,security.insecure)"
    required: false
  annotations:
    description: "List of annotation to set to the image"
    required: false
  attests:
    description: "List of attestation parameters (e.g., type=sbom,generator=image)"
    required: false
  build-args:
    description: "List of build-time variables"
    required: false
  build-contexts:
    description: "List of additional build contexts (e.g., name=path)"
    required: false
  builder:
    description: "Builder instance"
    required: false
  cache-from:
    description: "List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)"
    required: false
  cache-to:
    description: "List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)"
    required: false
  cgroup-parent:
    description: "Optional parent cgroup for the container used in the build"
    required: false
  context:
    description: "Build's context is the set of files located in the specified PATH or URL"
    required: false
  file:
    description: "Path to the Dockerfile"
    required: false
  labels:
    description: "List of metadata for an image"
    required: false
  load:
    description: "Load is a shorthand for --output=type=docker"
    required: false
    default: 'false'
  network:
    description: "Set the networking mode for the RUN instructions during build"
    required: false
  no-cache:
    description: "Do not use cache when building the image"
    required: false
    default: 'false'
  no-cache-filters:
    description: "Do not cache specified stages"
    required: false
  outputs:
    description: "List of output destinations (format: type=local,dest=path)"
    required: false
  platforms:
    description: "List of target platforms for build"
    required: false
  provenance:
    description: "Generate provenance attestation for the build (shorthand for --attest=type=provenance)"
    required: false
  pull:
    description: "Always attempt to pull all referenced images"
    required: false
    default: 'false'
  push:
    description: "Push is a shorthand for --output=type=registry"
    required: false
    default: 'false'
  sbom:
    description: "Generate SBOM attestation for the build (shorthand for --attest=type=sbom)"
    required: false
  secrets:
    description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
    required: false
  secret-envs:
    description: "List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)"
    required: false
  secret-files:
    description: "List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)"
    required: false
  shm-size:
    description: "Size of /dev/shm (e.g., 2g)"
    required: false
  ssh:
    description: "List of SSH agent socket or keys to expose to the build"
    required: false
  tags:
    description: "List of tags"
    required: true  # Note: changed vs `docker/build-push-action`
  target:
    description: "Sets the target stage to build"
    required: false
  ulimit:
    description: "Ulimit options (e.g., nofile=1024:1024)"
    required: false
  github-token:
    description: "GitHub Token used to authenticate against a repository for Git context"
    default: ${{ github.token }}
    required: false

  extra-inputs:
    description: "Additional files to include in the content hash"
    required: false

outputs:
  image-name:
    value: ${{ steps.main.outputs.image-name }}
    description: |
      The name of the image (e.g: `user/app`), reflected from the parsed `tags`
      input for convenience. Where several names are encountered, this is the
      first from the list for which the desired image (now) exists.

  image-tag:
    value: ${{ steps.main.outputs.image-tag }}
    description: |
      The tag of the image (e.g: `content-hash-1234abc...`), as constructed from
      the hashed inputs.

  image-name-tag:
    value: ${{ steps.main.outputs.image-name-tag }}
    description: |
      The full name of the image, `<image-name>:<image-tag>` (e.g:
      `user/app:content-hash-1234abc...`), for convenience.

  tag-existed:
    value: ${{ steps.main.outputs.tag-existed }}
    description: |
      Whether or not the tag already existed (for any of the input names).

runs:
  using: composite
  steps:
    - name: Detect if image needs building
      id: main
      shell: bash
      # Composite actions don't automatically get environment variables set up
      # from inputs. We could pass these another way, however there's a lot of
      # them and this is a sensible approach. Also follows the same naming
      # conventions. Pass through everything except secrets.
      env:
        INPUT_ADD-HOSTS: ${{ inputs.add-hosts }}
        INPUT_ALLOW: ${{ inputs.allow }}
        INPUT_ANNOTATIONS: ${{ inputs.annotations }}
        INPUT_ATTESTS: ${{ inputs.attests }}
        INPUT_BUILD-ARGS: ${{ inputs.build-args }}
        INPUT_BUILD-CONTEXTS: ${{ inputs.build-contexts }}
        INPUT_BUILDER: ${{ inputs.builder }}
        INPUT_CACHE-FROM: ${{ inputs.cache-from }}
        INPUT_CACHE-TO: ${{ inputs.cache-to }}
        INPUT_CGROUP-PARENT: ${{ inputs.cgroup-parent }}
        INPUT_CONTEXT: ${{ inputs.context }}
        INPUT_FILE: ${{ inputs.file }}
        INPUT_LABELS: ${{ inputs.labels }}
        INPUT_LOAD: ${{ inputs.load }}
        INPUT_NETWORK: ${{ inputs.network }}
        INPUT_NO-CACHE: ${{ inputs.no-cache }}
        INPUT_NO-CACHE-FILTERS: ${{ inputs.no-cache-filters }}
        INPUT_OUTPUTS: ${{ inputs.outputs }}
        INPUT_PLATFORMS: ${{ inputs.platforms }}
        INPUT_PROVENANCE: ${{ inputs.provenance }}
        INPUT_PULL: ${{ inputs.pull }}
        INPUT_PUSH: ${{ inputs.push }}
        INPUT_SBOM: ${{ inputs.sbom }}
        # INPUT_SECRETS: ${{ inputs.secrets }}
        # INPUT_SECRET-ENVS: ${{ inputs.secret-envs }}
        # INPUT_SECRET-FILES: ${{ inputs.secret-files }}
        INPUT_SHM-SIZE: ${{ inputs.shm-size }}
        INPUT_SSH: ${{ inputs.ssh }}
        INPUT_TAGS: ${{ inputs.tags }}
        INPUT_TARGET: ${{ inputs.target }}
        INPUT_ULIMIT: ${{ inputs.ulimit }}
        # INPUT_GITHUB-TOKEN: ${{ inputs.github-token }}

      run: |
        FILES=$(echo -n "${{ inputs.extra-inputs }}" | tr '\n' ' ')
        python3 ${{ github.action_path }}/main.py ${FILES:+--files $FILES}

    # todo: the action does not seem to be hashing these inputs:
    #   - secret-envs: ${{ inputs.secret-envs }}
    #   - secret-files: ${{ inputs.secret-files }}
    - name: Populate a build sandbox directory
      if: steps.main.outputs.build-required == 'true'
      id: sandbox
      shell: bash
      env:
        INPUT_FILE: ${{ inputs.file }}
        INPUT_CONTEXT: ${{ inputs.context }}
        INPUT_BUILD-CONTEXTS: ${{ inputs.build-contexts }}
        INPUT_EXTRA-INPUTS: ${{ inputs.extra-inputs }}

      run: |
        python3 "${{ github.action_path }}/sandbox.py"

    - name: Build image
      uses: docker/build-push-action@v5
      if: steps.main.outputs.build-required == 'true'
      id: build
      with:
        add-hosts: ${{ inputs.add-hosts }}
        allow: ${{ inputs.allow }}
        annotations: ${{ inputs.annotations }}
        attests: ${{ inputs.attests }}
        build-args: ${{ inputs.build-args }}
        build-contexts: ${{ steps.sandbox.outputs.build-contexts }}
        builder: ${{ inputs.builder }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        cgroup-parent: ${{ inputs.cgroup-parent }}
        context: ${{ steps.sandbox.outputs.context }}
        file: ${{ inputs.file }}
        labels: ${{ inputs.labels }}
        load: ${{ inputs.load }}
        network: ${{ inputs.network }}
        no-cache: ${{ inputs.no-cache }}
        no-cache-filters: ${{ inputs.no-cache-filters }}
        outputs: ${{ inputs.outputs }}
        platforms: ${{ inputs.platforms }}
        provenance: ${{ inputs.provenance }}
        pull: ${{ inputs.pull }}
        push: ${{ inputs.push }}
        sbom: ${{ inputs.sbom }}
        secrets: ${{ inputs.secrets }}
        secret-envs: ${{ inputs.secret-envs }}
        secret-files: ${{ inputs.secret-files }}
        shm-size: ${{ inputs.shm-size }}
        ssh: ${{ inputs.ssh }}
        tags: ${{ steps.main.outputs.tags }}  ## Note: not passed through
        target: ${{ inputs.target }}
        ulimit: ${{ inputs.ulimit }}
        github-token: ${{ inputs.github-token }}

    - name: Delete sandbox directory
      if: steps.main.outputs.build-required == 'true'
      id: clean
      shell: bash
      run: rm -rf "${{ steps.sandbox.outputs.tmpdir }}"
